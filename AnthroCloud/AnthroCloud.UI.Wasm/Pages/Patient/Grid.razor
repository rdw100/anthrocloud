@page "/Patient/Grid"
@using AnthroCloud.Entities
@using AnthroCloud.UI.Wasm.Services
@using Microsoft.Fast.Components.FluentUI
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@layout IconLayout

<div class="w3-row">
    <div class="w3-half" style="width:200px;height:100vh;background-color:#fbfbfb;">
        <AnthroCloud.UI.Wasm.Components.PatientTree />
    </div>
    <div class="w3-half w3-container">
        <h3>Fluent Grid</h3>
        <FluentTextField @oninput="FilterChanged">Filter Child</FluentTextField>
        <FluentDataGrid id="sortingGrid" GridTemplateColumns="1fr 1fr 1fr 1fr 75px 75px"
            RowsData=SortedRowsGrid 
            ColumnDefinitions=SortingColumnsGrid
            TItem="Patient">
            <HeaderCellTemplate>
                <FluentButton @onclick=@(()=>SortColumn(context))>
                    @context.Title
                    @if (context.Title == lastSortColumn?.Title)
                    {
                        @(isAscending ? " ↑" : " ↓")
                    }
                </FluentButton>
            </HeaderCellTemplate>
            <RowItemTemplate>
                <FluentDataGridRow TItem=Patient >
                    <FluentDataGridCell GridColumn=1>
                        <a href="javascript: void(0);" @onclick="@(e => ShowVisits(@context.PatientId))">@context.PatientId</a>
                    </FluentDataGridCell>
                    <FluentDataGridCell GridColumn=2>@context.FirstName</FluentDataGridCell>
                    <FluentDataGridCell GridColumn=3>@context.LastName</FluentDataGridCell>
                    <FluentDataGridCell GridColumn=4>@context.DateOfBirth.ToShortDateString()</FluentDataGridCell>
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => EditPatient(context.PatientId)">
                        Edit
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => DeletePatient(context.PatientId)">
                        Delete
                    </FluentButton>
                </FluentDataGridRow>
            </RowItemTemplate>
        </FluentDataGrid>
        @if (!RawSortedRowsGrid.Any())
        {
            <div>
                <FluentProgressRing></FluentProgressRing>
            </div>
        }
        <FluentDataGrid id="visitGrid" GridTemplateColumns="1fr 1fr 1fr 1fr"
                        RowsData=VisitRowsGrid
                        ColumnDefinitions=VisitColumnsGrid />
    </div>
</div>
@code {
    [Inject]
    public IPatientService PatientService { get; set; }

    [Inject]
    public IVisitService VisitService { get; set; }

    public List<ColumnDefinition<Patient>> SortingColumnsGrid = new();
    private ColumnDefinition<Patient>? lastSortColumn = null;
    private bool isAscending = false;
    public string filterValue = "";

    protected List<Patient> RawSortedRowsGrid = new();
    List<Patient> SortedRowsGrid = new();

    public List<ColumnDefinition<Visit>> VisitColumnsGrid = new();
    protected List<Visit> RawVisitGrid = new();
    List<Visit> VisitRowsGrid = new();

    protected async Task GetPatient()
    {
        RawSortedRowsGrid = (await PatientService.GetPatients()).ToList();
    }

    protected async Task GetVisit()
    {
        RawVisitGrid = (await VisitService.GetVisits(1)).ToList();
    }    

    protected override async Task OnInitializedAsync()
    {
        SortingColumnsGrid.Add(new ColumnDefinition<Patient>("First Name", x => x.FirstName));
        SortingColumnsGrid.Add(new ColumnDefinition<Patient>("Last Name", x => x.LastName));
        //SortingColumnsGrid.Add(new ColumnDefinition<Patient>("Birth", x => x.DateOfBirth));
        await GetPatient();

        VisitColumnsGrid.Add(new ColumnDefinition<Visit>("First Name", x => x.PatientId));
        VisitColumnsGrid.Add(new ColumnDefinition<Visit>("Last Name", x => x.Weight));
        VisitColumnsGrid.Add(new ColumnDefinition<Visit>("Height", x => x.LengthHeight));
        VisitColumnsGrid.Add(new ColumnDefinition<Visit>("Visit", x => x.DateOfVisit));
        await GetVisit();

        SortedRowsGrid = RawSortedRowsGrid;
        VisitRowsGrid = RawVisitGrid;

        base.OnInitialized();
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        var filter = args.Value as string;

        if (string.IsNullOrWhiteSpace(filter))
        {
            SortedRowsGrid = RawSortedRowsGrid;
        }
        else
        {
            SortedRowsGrid = RawSortedRowsGrid.Where(
                x => x.FirstName.ToLower().Contains(filter.ToLower()) ||
                     x.LastName.ToLower().Contains(filter.ToLower())
            ).ToList();
        }
        if (lastSortColumn != null)
        {
            SortedRowsGrid.Sort(new CustomComparer(lastSortColumn.FieldSelector!, isAscending));
        }
    }

    private void SortColumn(ColumnDefinition<Patient> columnDefinition)
    {
        if (lastSortColumn?.Title == columnDefinition.Title)
        {
            isAscending = !isAscending;
        }
        else
        {
            lastSortColumn = columnDefinition;
            isAscending = true;
        }
        SortedRowsGrid.Sort(new CustomComparer(columnDefinition.FieldSelector!, isAscending));
    }

    private void EditPatient(int patientId)
    {
        NavigationManager.NavigateTo($"/patient/edit/{patientId}");
    }

    private void DeletePatient(int patientId)
    {
        NavigationManager.NavigateTo($"/patient/delete/{patientId}");
    }

    protected async Task ShowVisits(int patientId)
    {
        RawVisitGrid = (await VisitService.GetVisits(patientId)).ToList();
        VisitRowsGrid = RawVisitGrid;
    }

    class CustomComparer : IComparer<Patient>
    {
        Func<Patient, object> _selector;
        bool _isAscending;

        public CustomComparer(Func<Patient, object> selector, bool isAscending)
        {
            _selector = selector;
            _isAscending = isAscending;
        }

        int IComparer<Patient>.Compare(Patient? x, Patient? y)
        {
            var xs = _selector(x!) as string;
            var ys = _selector(y!) as string;
            if (xs == null || ys == null)
                return 0;
            return string.Compare(xs, ys) * (_isAscending ? 1 : -1);
        }
    }
}