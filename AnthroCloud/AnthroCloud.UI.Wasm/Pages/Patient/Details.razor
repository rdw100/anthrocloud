@page "/Patient/Details"
@using AnthroCloud.Entities
@using AnthroCloud.Entities.Charts
@using AnthroCloud.UI.Wasm.Services
@inject HttpClient httpClient

<h1>Individual Assessment</h1>
<p>Children</p>
<div class="row">
    <div class="col-md-6">
        <a href='/patient/add' class="btn btn-primary" role="button">
            <i class="oi oi-plus"></i>
            Add Child
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search patient by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterPatient" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="oi oi-x"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (!patientList.Any())
{
    <div>
        <div class="spinner-border text-primary"></div>
    </div>    
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-primary">
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birth Date</th>
                <th>Gender</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patient in patientList)
            {
                <tr>
                    <td>
                        <a href="javascript: void(0);" @onclick="@(e => ShowVisits(@patient.PatientId))">@patient.PatientId</a>
                    </td>
                    <td>@patient.FirstName</td>
                    <td>@patient.LastName</td>
                    <td>@patient.DateOfBirth</td>
                    <td>@patient.Sex</td>
                    <td>
                        <a href='/patient/edit/@patient.PatientId' class="btn btn-outline-success" role="button">
                            Edit
                        </a>
                        <a href='/patient/delete/@patient.PatientId' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (visitList.Any())
    {
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-primary">
                <tr>
                    <th>Visit</th>
                    <th>Patient</th>
                    <th>Weight</th>
                    <th>Height</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var visit in visitList)
                {
                    <tr>
                        <td>@visit.VisitId</td>
                        <td>@visit.PatientId</td>
                        <td>@visit.Weight</td>
                        <td>@visit.LengthHeight</td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (measureList != null)
    {
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-primary">
            <tr>
                <th>Measure</th>
                <th>Percentile</th>
                <th>Z-score</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var measure in measureList)
            {
                <tr>
                    <td>@measure.Name</td>
                    <td>@measure.Percentile</td>
                    <td>@measure.Zscore</td>
                </tr>
            }
            </tbody>
        </table>
    }
}
@code {
    [Inject]
    public IPatientService PatientService { get; set; }
    [Inject]
    public IVisitService VisitService { get; set; }

    protected List<Patient> patientList = new();
    protected List<Patient> searchPatientData = new();
    protected Patient patient = new();

    protected List<Visit> visitList = new();
    protected List<Visit> searchVisitData = new();
    protected Visit visit = new();

    protected List<Measure> measureList = new();

    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetPatient();

        measureList.AddRange(new List<Measure>
        {
            new Measure {Name=GrowthTypes.WFL,Percentile=32.9,Zscore=-.44},
            new Measure {Name=GrowthTypes.WFA,Percentile=.9,Zscore=-2.37},
            new Measure {Name=GrowthTypes.LHFA,Percentile=0,Zscore=-3.54},
            new Measure {Name=GrowthTypes.BFA,Percentile=37.6,Zscore=-.32}
        });
    }
    protected async Task GetPatient()
    {
        patientList = (await PatientService.GetPatients()).ToList();
        searchPatientData = patientList;
    }
    protected async Task ShowVisits(int patientId)
    {
        visitList = (await VisitService.GetVisits(patientId)).ToList();
    }
    protected void FilterPatient()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            patientList = searchPatientData
                .Where(x => x.FirstName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1 ||
                            x.LastName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1      
                )
                .ToList();
        }
        else
        {
            patientList = searchPatientData;
        }
    }
    protected void DeleteConfirm(int patientID)
    {
        patient = patientList.FirstOrDefault(x => x.PatientId == patientID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        patientList = searchPatientData;
    }

    public class Measure
    {
        public GrowthTypes Name { get; set; }
        public double Percentile { get; set; }
        public double Zscore { get; set; }
    }
}